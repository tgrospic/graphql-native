import R from 'ramda'
import { GraphQLObjectType, GraphQLInputObjectType, GraphQLString, GraphQLInt, GraphQLFloat, GraphQLList } from 'graphql'
import { GraphQLDateTime } from 'graphql-iso-date'
import { FIELD, ENTITY, EntitySchema } from '../schema'
import { logger } from '../lib'

// Base types mapping
const fieldToGraphQLTypeMap = {
  [FIELD.PK_NUM_SEQ]: {
    // type: new GraphQLNonNull(GraphQLInt),
    // Non-null because it's optional on input types
    type: GraphQLInt,
  },
  [FIELD.NUMBER]: {
    type: GraphQLInt,
  },
  [FIELD.DECIMAL]: {
    type: GraphQLFloat,
  },
  [FIELD.STRING]: {
    type: GraphQLString,
  },
  [FIELD.DATE]: {
    type: GraphQLDateTime,
  },
}

// Field -> GraphQLProp
export const toGqlProp = ({name, type, description}) => ({
  [name]: {
    ...fieldToGraphQLTypeMap[type],
    description
  },
})

// Field[] -> GraphQLProp
export const toGqlProps = R.reduce((acc, x) => ({...acc, ...toGqlProp(x)}), {})


// GraphQL type (definition) builder
const typeDef = (entity, description, override = R.identity) => ({
  name: entity,
  description,
  fields: () => R.pipe(toGqlProps, override) (EntitySchema[entity]),
})

// Create GraphQL Type (return objects)
export const gqlType = x => new GraphQLObjectType({ ...x, name: `${x.name}` })

// Create GraphQL Type (input objects)
export const gqlTypeInput = x => new GraphQLInputObjectType({ ...x, name: `${x.name}Input` })

// Fields auto generated by Sequelize
const autoProps = {
  createdAt: {
    type: GraphQLDateTime,
    description: 'auto generated by Sequelize',
  },
  updatedAt: {
    type: GraphQLDateTime,
    description: 'auto generated by Sequelize',
  },
}

/***************************************************************
*
* GraphQL types definition
*
****************************************************************/

// Item
export const itemDef = typeDef(ENTITY.ITEM, 'this is Item type', fields => ({
  ...autoProps,
  ...fields,
  items: {
    type: new GraphQLList(itemType),
    description: 'child items',
  },
}))
export const itemType = gqlType(itemDef)

export const itemInputDef = typeDef(ENTITY.ITEM, 'this is Item type', fields => ({
  ...autoProps,
  ...fields,
  items: {
    type: new GraphQLList(itemInputType),
    description: 'child items',
  },
}))
export const itemInputType = gqlTypeInput(itemInputDef)

// User
export const userDef = typeDef(ENTITY.USER, 'this is User type', fields => ({
  ...autoProps,
  ...fields,
  orders: {
    type: new GraphQLList(orderType),
    description: 'user\'s orders',
  },
}))
export const userType = gqlType(userDef)

export const userInputDef = typeDef(ENTITY.USER, 'this is User type', fields => ({
  ...autoProps,
  ...fields,
  orders: {
    type: new GraphQLList(orderInputType),
    description: 'user\'s orders',
  },
}))
export const userInputType = gqlTypeInput(userInputDef)

// Order
export const orderDef = typeDef(ENTITY.ORDER, 'this is Order type', fields => ({
  ...autoProps,
  ...fields,
  user: {
    type: userType,
    description: 'user who has this Order',
  },
  orderItems: {
    type: new GraphQLList(orderItemType),
    description: 'items on this Order',
  },
  statuses: {
    type: new GraphQLList(orderStatusType),
    description: 'statuses of this Order',
  },
}))
export const orderType = gqlType(orderDef)

export const orderInputDef = typeDef(ENTITY.ORDER, 'this is Order type', fields => ({
  ...autoProps,
  ...fields,
  user: {
    type: userInputType,
    description: 'user who has this Order',
  },
}))
export const orderInputType = gqlTypeInput(orderInputDef)

// Order item
export const orderItemDef = typeDef(ENTITY.ORDER_ITEM, 'this is OrderItem type', fields => ({
  ...autoProps,
  ...fields,
  order: {
    type: orderType,
    description: 'parent Order',
  },
}))
export const orderItemType = gqlType(orderItemDef)

export const orderStatusDef = typeDef(ENTITY.ORDER_STATUS, 'this is OrderStatus type', fields => ({
  ...autoProps,
  ...fields,
  order: {
    type: orderType,
    description: 'parent Order',
  },
}))
export const orderStatusType = gqlType(orderStatusDef)
