import R from 'ramda'
import { GraphQLObjectType, GraphQLNonNull, GraphQLString, GraphQLInt, GraphQLFloat, GraphQLList } from 'graphql'
import { GraphQLDateTime } from 'graphql-iso-date'
import { FIELD, ENTITY, EntitySchema } from '../schema'
import { logger } from '../lib'

// Base types mapping
const fieldToGraphQLTypeMap = {
  [FIELD.PK_NUM_SEQ]: {
    type: new GraphQLNonNull(GraphQLInt),
  },
  [FIELD.NUMBER]: {
    type: GraphQLInt,
  },
  [FIELD.DECIMAL]: {
    type: GraphQLFloat,
  },
  [FIELD.STRING]: {
    type: GraphQLString,
  },
  [FIELD.DATE]: {
    type: GraphQLDateTime,
  },
}

// Field -> GraphQLProp
const toGraphQLProp = ({name, type, description}) => ({
  [name]: {
    ...fieldToGraphQLTypeMap[type],
    description
  },
})

// Field[] -> GraphQLProp
const graphQLProps = R.reduce((acc, x) => ({...acc, ...toGraphQLProp(x)}), {})

// GraphQL type builder
const createType = (entity, description, override = R.identity) => new GraphQLObjectType({
  name: entity,
  description,
  fields: () => R.pipe(graphQLProps, override) (EntitySchema[entity]),
})

// Fields auto generated by Sequelize
const autoProps = {
  createdAt: {
    type: GraphQLDateTime,
    description: 'auto generated by Sequelize',
  },
  updatedAt: {
    type: GraphQLDateTime,
    description: 'auto generated by Sequelize',
  },
}

/***************************************************************
*
* GraphQL types definition
*
****************************************************************/

export const userType = createType(ENTITY.USER, 'this is User type', fields => ({
  ...autoProps,
  ...fields,
  orders: {
    type: new GraphQLList(orderType),
    description: 'user\'s orders',
  },
}))

export const orderType = createType(ENTITY.ORDER, 'this is Order type', fields => ({
  ...autoProps,
  ...fields,
  user: {
    type: userType,
    description: 'user who has this Order',
  },
  orderItems: {
    type: new GraphQLList(orderItemType),
    description: 'items on this Order',
  },
  statuses: {
    type: new GraphQLList(orderStatusType),
    description: 'statuses of this Order',
  },
}))

export const orderItemType = createType(ENTITY.ORDER_ITEM, 'this is OrderItem type', fields => ({
  ...autoProps,
  ...fields,
  order: {
    type: orderType,
    description: 'parent Order',
  },
}))

export const orderStatusType = createType(ENTITY.ORDER_STATUS, 'this is OrderStatus type', fields => ({
  ...autoProps,
  ...fields,
  order: {
    type: orderType,
    description: 'parent Order',
  },
}))
